<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>小余blog</title><link>https://hnugryu.github.io/</link><description>只要你是开心的，这条路怎么走都没关系</description><copyright>小余blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://raw.githubusercontent.com/HNUgrYu/gryu.github.io/main/static/favicon.ico</url><title>avatar</title><link>https://hnugryu.github.io/</link></image><lastBuildDate>Wed, 02 Apr 2025 13:12:55 +0000</lastBuildDate><managingEditor>小余blog</managingEditor><ttl>60</ttl><webMaster>小余blog</webMaster><item><title>测试开发工程师核心Q&amp;A</title><link>https://hnugryu.github.io//post/ce-shi-kai-fa-gong-cheng-shi-he-xin-Q%26A.html</link><description># 专业问题
- 测试内容划分
1.功能测试
2.性能测试
3.UI设计
4.兼容性测试
5.安全测试
6.网络测试
- 开发流程
需求分析——用例开发——环境搭建——测试执行——测试报告——上线维护
- 测试用例的组成
类别 编号 名称 目的 前置条件 测试数据 执行步骤 预期结果 实际结果 优先级 通过与否 备注
- 黑盒测试和白盒测试的区别
黑盒测试：根据需求设计
常用方法：
1.等价划分——多输入问题
2.边界值分析——有边界条件问题
3.判定表测试——输入有多个条件且每个条件都有多个可能值
4.状态转化测试——如登录系统有转化问题
5.因果图——关注逻辑问题
6.错误推断法——经验推断
白盒测试：内部实现
1.语句覆盖
2.分支覆盖
3.路径覆盖
4.条件覆盖
5.循环测试
6.数据流测试
- 死锁的四个条件
死锁：当多个实体（如线程、进程）因争夺资源而陷入无限等待时，若无外部干预，所有相关实体都无法继续执行
1.互斥
2.持有并等待
3.循环
4.不能抢占
- 线程与进程
线程：线程是进程内的一个执行单元，多个线程共享进程的资源（如内存空间、文件描述符等）
在线性代数计算、图像处理等场景中，多个计算任务可以并行执行;GUI应用程序（如浏览器、文本编辑器等）通常会使用线程来分别处理界面交互和后台计算
进程：进程是操作系统分配资源的基本单位，每个进程都有独立的地址空间、代码、数据、堆栈等
多任务操作系统，大规模数据处理
协程：是比线程更轻量级的执行单元
爬虫和大规模的网络请求，高并发的I/O密集型任务，如网络请求、数据库查询、文件操作
- 七层网络结构
物理层——链路层——网络层IP——传输层TCP——会话层——表示层——应用层
- get和post的区别
定义：HTTP 协议中，GET 和 POST 是两种最常用的请求方法
get：主要用于从服务器获取资源，即多次请求同一资源不会改变服务器状态。</description><guid isPermaLink="true">https://hnugryu.github.io//post/ce-shi-kai-fa-gong-cheng-shi-he-xin-Q%26A.html</guid><pubDate>Wed, 02 Apr 2025 02:54:37 +0000</pubDate></item><item><title>ubuntu 常见问题</title><link>https://hnugryu.github.io//post/ubuntu%20-chang-jian-wen-ti.html</link><description># pip install显示错误
```ERROR: Could not find a version that satisfies the requirement python (from versions: none)

ERROR: No matching distribution found for python```
## 删除代理配置
`nano ～/.config/pip/pip.conf`

# 桌面dock图标显示错乱
## desktop文件不应该放在桌面
`mv ~/桌面/zotero.desktop ~/.local/share/applications/`

# 备份问题
## 系统备份
`timeshift`
## 环境备份
`pip freeze &gt; requirements_backup.txt`


。</description><guid isPermaLink="true">https://hnugryu.github.io//post/ubuntu%20-chang-jian-wen-ti.html</guid><pubDate>Mon, 10 Feb 2025 13:49:23 +0000</pubDate></item><item><title>Ubuntu重新归来</title><link>https://hnugryu.github.io//post/Ubuntu-zhong-xin-gui-lai.html</link><description>&gt; 用移动硬盘作为ubuntu系统盘，实现双系统&#13;
# 前期提要&#13;
#6 &#13;
# 实现步骤&#13;
1. 内容备份&#13;
2. 系统盘制作&#13;
3. 安装过程中选择磁盘擦除（一定要选择自己的移动硬盘）&#13;
4. 清华源的替换（注意版本问题）（pycharm中直接在终端添加插件下载的清华源，网上的教学都过时了）&#13;
[解决方案](https://www.cnblogs.com/sdlyxyf/p/18455559)&#13;
5. 输入法安装（搜狗暂时没有解决无法输入中文问题，fcitx5暂时主流输入法都不适配，需要先卸载后安装fcitx）&#13;
` sudo apt install fcitx fcitx-googlepinyin `&#13;
6.  压缩下载包&#13;
`tar -zxvf /home/gryu/下载/pycharm-community-2024.3.1.tar.gz`&#13;
`sudo dpkg -i /home/gryu/下载/sogoupinyin_4.2.1.145_amd64.deb`&#13;
7. 代理设置&#13;
从微信传输压缩包，使用指令 `sudo dpkg -i packname.deb`,ubuntu系统的文件类型为x86/amd64&#13;
8. 创建桌面快捷方式&#13;
` nano ~/桌面/pycharm.desktop ` &#13;
```&#13;
[Desktop Entry]&#13;
Version=1.0&#13;
Type=Application&#13;
Name=PyCharm&#13;
Icon=/home/gryu/pycharm-community-2024.3.1/bin/pycharm.png&#13;
Exec=/home/gryu/pycharm-community-2024.3.1/bin/pycharm&#13;
Comment=Develop with pleasure!&#13;
Categories=Development;IDE;&#13;
Terminal=false&#13;
```&#13;
# 文件备份 启动盘下完成（需提前用timeshift创建快照）&#13;
```&#13;
sudo apt update&#13;
sudo apt install timeshift&#13;
```&#13;
分区确定&#13;
```&#13;
sudo fdisk -l&#13;
lsblk&#13;
```&#13;
文件复原&#13;
```&#13;
sudo mkdir /etc/timeshift&#13;
sudo mount /dev/sdb2 /etc/timeshift&#13;
sudo timeshift-launcher&#13;
&#13;
```&#13;
# Latex&#13;
sudo apt update&#13;
sudo apt intall texlive-full&#13;
配置中选择xelatex&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/Ubuntu-zhong-xin-gui-lai.html</guid><pubDate>Mon, 16 Dec 2024 08:33:31 +0000</pubDate></item><item><title>少年心事</title><link>https://hnugryu.github.io//post/shao-nian-xin-shi.html</link><description>&gt; 前情提要&#13;
闲来翻看之前手机的备忘录，暮然回首，轻舟已过万重山&#13;
# 师姐&#13;
&gt; 有点后悔把聊天记录都删掉了，不过也是怕自己忍不住翻看吧&#13;
&#13;
## 道歉&#13;
哪怕是冒着你更讨厌我的后果 我还是给你发了这段消息 你说得对 两个不同频的人怎么都是错的 要等到咱们之间尴尬成这样了 我才真正发现你其实一直在想要和我们做朋友之间做出了很多的事情 每次都是你负责讲有趣的事情调动话题 每次都是你在一边承受着身体上的不适一边陪我们 每次都是你在忍受着我的情绪 你总对我很好 但是我还喜欢做一些无意义的骚扰你的事情 在你面前我无法冷静下来思考我现在觉得非常愧对 我们之间兴趣爱好不同 三观不合 不能很好了解你的情绪与想法 我意识到一直了解你想着找你做很好的朋友对你都是负担 在消耗你本来就来之不易的在各种压力下的能量 我在你优美而又坚毅的灵魂下汲取着养分 却无以回报 只能做一些无意义但却是我目前贫瘠的大脑唯一所能想到的事情 结果自然是一塌糊涂 抱歉&#13;
## 表白（臆想版）&#13;
我不知道从什么时候喜欢上你了，喜欢你的清冽，喜欢你的奇奇怪怪，更喜欢你内心的纯粹，我从未在现实中遇见过你这样的女孩，我想要了解你眼中的世界是什么样的，想要为你撑伞。</description><guid isPermaLink="true">https://hnugryu.github.io//post/shao-nian-xin-shi.html</guid><pubDate>Thu, 05 Dec 2024 11:36:07 +0000</pubDate></item><item><title>深度学习小结</title><link>https://hnugryu.github.io//post/shen-du-xue-xi-xiao-jie.html</link><description># 前瞻&#13;
## 核心&#13;
预测结果：&#13;
1.我们想要什么&#13;
2.某个行为的结果&#13;
3.世界如何改变，即未来趋势&#13;
4.达成某个目的的实现方法&#13;
实现过程：&#13;
- 找到输入与输出的抽象联系，属于统计思维，而非传统计算机科学算法的准确性思维。</description><guid isPermaLink="true">https://hnugryu.github.io//post/shen-du-xue-xi-xiao-jie.html</guid><pubDate>Thu, 05 Dec 2024 07:53:22 +0000</pubDate></item><item><title>相机标定小论文总结</title><link>https://hnugryu.github.io//post/xiang-ji-biao-ding-xiao-lun-wen-zong-jie.html</link><description># 方法论&#13;
## 亚像素边缘提取&#13;
- 实现方法：&#13;
计算Zernike矩 （Amn（ m控制旋转  n控制多项式阶数）&#13;
- 本质：&#13;
类似泰勒展开，用正交基完成像素间的细化拟合，像素彼此的影响范围由ROI半径决定&#13;
- 特性: &#13;
1.正交性&#13;
2.旋转不变性&#13;
3.完备性&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/xiang-ji-biao-ding-xiao-lun-wen-zong-jie.html</guid><pubDate>Tue, 03 Dec 2024 03:07:00 +0000</pubDate></item><item><title>思维方式</title><link>https://hnugryu.github.io//post/si-wei-fang-shi.html</link><description># 六顶思维帽&#13;
- 示例：讨论一个提议&#13;
1. 蓝色 统领全局 控制管理全局思维过程&#13;
2. 白色 理性与事实 从事实讲话，理性分析现状&#13;
3. 红色 感性 只从第一感觉出发&#13;
4. 绿色 创造性 提出新思路&#13;
5. 黑色 批判性 消极的分析其劣势&#13;
6. 黄色 积极与机会 积极的想会产生什么好的yingxiang。</description><guid isPermaLink="true">https://hnugryu.github.io//post/si-wei-fang-shi.html</guid><pubDate>Tue, 03 Dec 2024 02:50:08 +0000</pubDate></item><item><title>论文可视化小结</title><link>https://hnugryu.github.io//post/lun-wen-ke-shi-hua-xiao-jie.html</link><description># 数据加载与保存&#13;
## python&#13;
### 数据类型查看&#13;
1. np.shape #查看数组维度及元素数&#13;
2. Debug #实时查看数组状态&#13;
3. print 数组 #不推荐，主要用于看数组内容&#13;
### 数组加载&#13;
1. `numpy.loadtxt(fname, dtype=, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False）` #csv，txt文件&#13;
- comments 有该元素的行跳过&#13;
- delimiter 区分元素，如逗号分号，默认空格&#13;
- skiprows 跳过开头几行&#13;
- usecols=（0,2）使用第0行和第2行&#13;
2. `numpy.load（fname） ` #npy文件，01执行编程文件，无法可视化&#13;
### 数组保存 &#13;
1.np.save(fname,arr)  保存为npy文件&#13;
2.np.savetxt（fname，arr）保存类型为文件后缀&#13;
&#13;
# 文献管理&#13;
## Zotero&#13;
#10 文献管理实现部分展示&#13;
![image](https://github.com/HNUgrYu/hnugryu.github.io/blob/main/static/8.png?raw=true)&#13;
![image](https://github.com/HNUgrYu/hnugryu.github.io/blob/main/static/241203.png?raw=true)&#13;
## 文献注意&#13;
1. 不得使用未正式发表论文&#13;
2. 中国人拼音名不能缩写&#13;
3. 作者先姓后名&#13;
4. 主要按照期刊要求更改&#13;
# 格式&#13;
## 公式&#13;
### 注意事项&#13;
1. 正文中不要使用Mathtype公式框，段落间距会很丑&#13;
5. 可以统一更改公式格式，需要储存预置样式，格式化应用&#13;
6. 公式编号使用mathtype自带右编号功能，正常为公式居中，但复制后如果公式字体或者论文要求格式改变无法自适应，需要制表符的参与&#13;
7. 制表符的制作原理，按Tab键，使接下来的文本按照闲情设定好的对齐方式对齐到设置的固定位置，可以在视图中打开标尺功能，精确找到想设定位置&#13;
### 斜体&#13;
1. 通俗规定，变量为斜体，像单位、常量为正体&#13;
2. 矩阵、向量、张量为加粗斜体&#13;
# 图表制作&#13;
## 字体&#13;
1. 图表题比正文小半号，图表内容比图表题再小半号，表题为黑体&#13;
2. 前后要调整段落间隔&#13;
## 图表绘制&#13;
1. 三线表先设置为无边框，再用边框刷1pt&#13;
2. 联图的绘制最好放置在表格中，先固定表格大小，然后再插入图片，使其适应&#13;
## 流程图绘制&#13;
visio 、draw.io、PPT&#13;
## 算法图绘制&#13;
1. 确定输入输出参数&#13;
2. 按步骤描述，和公式原理call back&#13;
3. 重要算法可以画伪代码流程表&#13;
## 原理图绘制&#13;
1. Adobe illustrator绘制的不能在PPT里面修改，注意最后在ppt里面再添加字&#13;
## 数据处理转换为图表&#13;
### MATLAB&#13;
1. 生成图像后记得放大，改字体字号，然后保存png，svg等格式，保证分辨率，如果发现很糊，记得检查导出是按位还是按向量&#13;
2. 二维曲线三维展开&#13;
```&#13;
% MATLAB代码：修正填充区域至下方（y=0）&#13;
&#13;
% 定义数据范围&#13;
x = linspace(0, 10, 100); % 定义x轴数据&#13;
&#13;
% 定义三个二维曲线（不同函数形式）&#13;
y_red = x.^2;             % 红色曲线：y = x^2&#13;
y_green = x.^2 + x;       % 绿色曲线：y = x^2 + x&#13;
y_blue = x.^2 + 2*x;      % 蓝色曲线：y = x^2 + 2x&#13;
&#13;
% 定义三维图中Z轴的偏移位置（用于分开显示曲线）&#13;
z_red = zeros(size(x));   % 红色曲线的Z位置&#13;
z_green = ones(size(x));  % 绿色曲线的Z位置&#13;
z_blue = 2 * ones(size(x)); % 蓝色曲线的Z位置&#13;
&#13;
% 创建三维图&#13;
figure;&#13;
hold on;&#13;
&#13;
% 填充红色曲线（向下到 y=0）&#13;
fill3([x, fliplr(x)], [z_red, fliplr(z_red)], [y_red, zeros(size(y_red))], 'r', 'FaceAlpha', 0.5, 'EdgeColor', 'none');&#13;
plot3(x, z_red, y_red, 'r', 'LineWidth', 2);&#13;
&#13;
% 填充绿色曲线（向下到 y=0）&#13;
fill3([x, fliplr(x)], [z_green, fliplr(z_green)], [y_green, zeros(size(y_green))], 'g', 'FaceAlpha', 0.5, 'EdgeColor', 'none');&#13;
plot3(x, z_green, y_green, 'g', 'LineWidth', 2);&#13;
&#13;
% 填充蓝色曲线（向下到 y=0）&#13;
fill3([x, fliplr(x)], [z_blue, fliplr(z_blue)], [y_blue, zeros(size(y_blue))], 'b', 'FaceAlpha', 0.5, 'EdgeColor', 'none');&#13;
plot3(x, z_blue, y_blue, 'b', 'LineWidth', 2);&#13;
&#13;
% 设置图形标签&#13;
xlabel('X-axis (Time)');&#13;
ylabel('Z-axis (Channel Offset)');&#13;
zlabel('Y-axis (Function Value)');&#13;
&#13;
% 设置视角&#13;
view(45, 30);&#13;
&#13;
% 添加图例&#13;
legend({'Red Curve', 'Green Curve', 'Blue Curve'}, 'Location', 'northeast');&#13;
&#13;
% 美化图形&#13;
grid on;&#13;
title('3D Plot with Properly Filled 2D Curves');&#13;
hold off;&#13;
```&#13;
![image](https://github.com/HNUgrYu/hnugryu.github.io/blob/main/static/QQ%E6%88%AA%E5%9B%BE20241203145111.png?raw=true)&#13;
3. 误差比较绘制&#13;
```&#13;
% 读取 CSV 文件为一个表格&#13;
data = readtable('ygr_combined_data.csv');&#13;
&#13;
% 提取数据&#13;
x = data{2:end, 1};&#13;
y = data{2:end, 2};&#13;
z = data{2:end, 3};&#13;
&#13;
% 创建一个3D图形&#13;
figure;&#13;
&#13;
group = z; % 分组依据是 z 值&#13;
&#13;
% 设置每个组的颜色&#13;
colors = [&#13;
    0.1  0.2  0.5;  % 蓝色&#13;
    0.8  0.2  0.2;  % 红色&#13;
    0.2  0.8  0.2;  % 绿色&#13;
    0.7  0.7  0;    % 黄色&#13;
    0.3  0.8  0.8;  % 青色&#13;
    0.8  0.5  0.2;  % 橙色&#13;
    0.5  0.5  0.5;  % 灰色&#13;
    0.9  0.1  0.9;  % 紫色&#13;
    0.5  0.9  0.5;  % 浅绿色&#13;
    0.8  0.3  0.8   % 深紫色&#13;
];&#13;
&#13;
% 对每个组绘制散点&#13;
hold on;&#13;
for g = 1:5&#13;
    % 绘制每一组的散点&#13;
    scatter3(x(group == g), y(group == g), z(group == g), 90, 'MarkerFaceColor', colors(g,:), 'MarkerEdgeColor', 'k', 'LineWidth', 1);&#13;
end&#13;
&#13;
% 创建网格，用于绘制 z 层的网格&#13;
[xGrid, yGrid] = meshgrid(linspace(-0.4, 0.4,2), linspace(-0.4, 0.4, 2));&#13;
&#13;
% 为每个 z 层绘制网格&#13;
for zLayer = 1:5&#13;
    % 绘制网格线&#13;
    mesh(xGrid, yGrid, zLayer * ones(size(xGrid)), 'EdgeColor', [0.5 0.5 0.5], 'FaceAlpha', 0);&#13;
end&#13;
&#13;
% 设置坐标轴标签&#13;
xlabel('u/像素');&#13;
ylabel('v/像素');&#13;
zlabel('组别');&#13;
&#13;
% 显示网格&#13;
grid on;&#13;
&#13;
% 设置视角&#13;
view(3);&#13;
&#13;
% 设置标题&#13;
title('本文改进方法 平均重投影误差:0.00931像素');&#13;
```&#13;
&#13;
![image](https://github.com/HNUgrYu/hnugryu.github.io/blob/main/static/uv_our.png?raw=true)&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/lun-wen-ke-shi-hua-xiao-jie.html</guid><pubDate>Tue, 03 Dec 2024 02:44:00 +0000</pubDate></item><item><title>是conda啊</title><link>https://hnugryu.github.io//post/shi-conda-a.html</link><description>#常见命令&#13;
1.创建新环境&#13;
` conda create --name &lt;环境名称&gt; python=&lt;版本&gt; `&#13;
2.加载新环境&#13;
` conda activate &lt;环境名称&gt; `&#13;
3.安装包&#13;
` conda install &lt;包名称&gt; `&#13;
4.环境列表&#13;
`conda env list `&#13;
5.退出环境&#13;
`conda deactivate`&#13;
6.删除环境&#13;
`conda remove --name &lt;环境名称&gt; --all`&#13;
7.输出环境列表&#13;
`conda env export &gt; environment.yml`&#13;
8.重建环境&#13;
`conda env create -f environment.yml`&#13;
&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/shi-conda-a.html</guid><pubDate>Wed, 27 Nov 2024 11:51:47 +0000</pubDate></item><item><title>python 问题</title><link>https://hnugryu.github.io//post/python%20-wen-ti.html</link><description>## 手动设置一个矩形的外围轮廓&#13;
```&#13;
init=[]&#13;
x = np.linspace(0, 4000, 4000)&#13;
y = np.linspace(0, 3096, 4000)&#13;
zero=np.zeros(4000)&#13;
ymax=zero+3096&#13;
xmax=zero+4000&#13;
init.append(np.array([zero, y]).T) &#13;
init.append(np.array([x, zero]).T)&#13;
init.append(np.array([x, ymax]).T)&#13;
init.append(np.array([xmax, y]).T)&#13;
init= np.vstack(init)&#13;
snake = active_contour(image_smooth, init, alpha=0.01, beta=10, gamma=0.001)&#13;
```。</description><guid isPermaLink="true">https://hnugryu.github.io//post/python%20-wen-ti.html</guid><pubDate>Thu, 07 Nov 2024 08:24:46 +0000</pubDate></item><item><title>软件安装及实现方法</title><link>https://hnugryu.github.io//post/ruan-jian-an-zhuang-ji-shi-xian-fang-fa.html</link><description>&gt; 日常会遇到很多小问题，但都是当场查google就解决了，也没想着记录下来，直到前几天发现自己有一个刚解决的问题，又出现的时候只能迷糊记起一点步骤，又反复查询，反复尝试，浪费了很多时间

## office的安装
&gt; office分为很多个版本，可以从账户看到自己的版本信息。</description><guid isPermaLink="true">https://hnugryu.github.io//post/ruan-jian-an-zhuang-ji-shi-xian-fang-fa.html</guid><pubDate>Thu, 26 Sep 2024 13:46:21 +0000</pubDate></item><item><title>jupyter notebook</title><link>https://hnugryu.github.io//post/jupyter%20notebook.html</link><description>## 怎么样使用jupyter notebook&#13;
1. 加入kernel&#13;
`pip install --upgrade jupyter ipykernel`&#13;
`python -m ipykernel install --user --name pytorch_env --display-name 'Python (PyTorch Env)'`&#13;
&#13;
&#13;
2. 直接`jupyter notebook`使用&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/jupyter%20notebook.html</guid><pubDate>Mon, 09 Sep 2024 15:07:07 +0000</pubDate></item><item><title>clash verge 规则</title><link>https://hnugryu.github.io//post/clash%20verge%20-gui-ze.html</link><description>## 怎么连接vpn后访问一些校园网站&#13;
1. 找到要连接校园网的网站ip地址&#13;
`nslookup gym.hnu.edu.cn`&#13;
2. 在clash verge中加入这个IP地址&#13;
- 在订阅情况下：&#13;
点击订阅找到修改文件，在rule中加入&#13;
`DOMAIN-SUFFIX,gym.hnu.edu.cn,DIRECT`&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/clash%20verge%20-gui-ze.html</guid><pubDate>Mon, 09 Sep 2024 08:24:30 +0000</pubDate></item><item><title>毛主席语录（摘选）</title><link>https://hnugryu.github.io//post/mao-zhu-xi-yu-lu-%EF%BC%88-zhai-xuan-%EF%BC%89.html</link><description>1. 民族斗争，说到底，是一个阶级斗争问题。</description><guid isPermaLink="true">https://hnugryu.github.io//post/mao-zhu-xi-yu-lu-%EF%BC%88-zhai-xuan-%EF%BC%89.html</guid><pubDate>Thu, 05 Sep 2024 05:12:34 +0000</pubDate></item><item><title>Ubuntu服务器那些事</title><link>https://hnugryu.github.io//post/Ubuntu-fu-wu-qi-na-xie-shi.html</link><description># Ubuntu服务器的使用说明&#13;
## 使用finalshell连接windows主机和服务器&#13;
&gt; 本质上是利用ssh连接&#13;
### 连接步骤&#13;
1. 在windows系统上下载Finalshell软件&#13;
2. 在Ubuntu服务器的终端找到其IP地址&#13;
3. 在finalshell根据IP地址和用户名和密码连接到服务器&#13;
4. 就可以在本地操作Ubuntu的终端&#13;
### finalshell的实用功能&#13;
1. 可以直接在界面下方传输文件&#13;
2. 监控内存运行情况&#13;
3. GUI界面友好&#13;
&#13;
### 利用ssh在服务器上配置环境&#13;
1. 对于anaconda自己配置的环境导出为environment.yml文件传输到服务器&#13;
''' conda env export &gt; environment.yml '''&#13;
&gt; 我觉的比较重要的一点就是理清楚自己在什么目录的位置，什么环境下进行的操作，因此conda的环境管理可以帮助我们&#13;
&#13;
2. 服务器新建文件夹&#13;
- 默认根目录：`` /home/ubuntu  ``&#13;
- 嵌套创建新的路径：` mkdir ygr/env -p  `&#13;
- 展示当前路径下的内容：`ls `&#13;
- 回到上一目录：` cd .. `&#13;
&#13;
3. 将yml文件传输到服务器&#13;
- csp指令传输文件可能遇到权限不够的问题，无法向服务器文件中写入文件&#13;
- 因此使用finalshell中的文件传输，此时权限为管理者权限&#13;
&#13;
4. 下载miniconda `sudo apt install `&#13;
&#13;
- 先添加清华源&#13;
- 再更新Ubuntu系统&#13;
- 就可以使用apt下载需要的包了&#13;
`wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh`&#13;
&#13;
&#13;
5. `bash` 解包&#13;
&#13;
`bash Miniconda3-latest-Linux-x86_64.sh`&#13;
&#13;
6. 添加到path&#13;
&#13;
``export PATH='$HOME/miniconda3/bin:$PATH'&#13;
source ~/.bashrc``&#13;
&gt; 中间小写的部分才是相对路径&#13;
&#13;
&#13;
4.进入到文件所在位置运行yml文件&#13;
- 用yml文件配置环境 ：` sudo conda env create -f environment.yml`&#13;
&#13;
---&#13;
&#13;
&#13;
## 系统炸了~不嘻嘻&#13;
### 重装ubuntu系统&#13;
1. 官网安装iso镜像文件&#13;
&gt; 分为server和desktop版本，server全是命令行，更贴近于服务器的功能&#13;
&#13;
2. 用rusa把u盘变成驱动盘（会格式化u盘，iso文件不能放在U盘）&#13;
3.重装系统，需要在分区里选择自定义分区，删除之前所有的内容&#13;
4.拔掉u盘重启就安装好了&#13;
&#13;
### server系统的那些事&#13;
**版本24.0**&#13;
&gt; server系统相较于desktop系统来说抽象很多&#13;
问题1：连接不上网络&#13;
- 看网络连接：` sudo link show `&#13;
lo：本地地址&#13;
enp4s0：物联网地址，pci接口连接的网线&#13;
wlo1：wifi &#13;
- 看网络连接状态： ` ip a` inet后面接的第一个是系统地址，第二个是广播地址&#13;
- 静态地址和动态地址（静态地址需要`ipconfig`来看相关地址，动态用dhpc4配置）&#13;
- 修改文件：`sudo nano &lt;filename&gt;`nano文件需要保证严格的缩进&#13;
- 运行netplan文件： ` sudo netplan try `&#13;
&gt; 在修改了无数次netplan的配置文件后，了解了ip地址，dns，网关，掩码是什么，知道了ubuntu系统的基本操作，翻阅了官方的文档，仍然连网路连接的问题都解决不了&#13;
&gt; 如果你还在和我一样因为server服务器更适合跑程序的这个优点而选择了他，自身对其没有了解的话，尽快跑吧，隔壁ubuntu桌面版程序都跑完了你还在配置呢&#13;
&#13;
### ubuntu系统那些事&#13;
&gt; 嗖的一下就安装完了&#13;
`sudo apt update`&#13;
`sudo apt upgrade`&#13;
`sudo install  openssh-server`&#13;
就可以继续使用finalshell连接了&#13;
&#13;
### barrier的安装&#13;
&gt; 随着barrier的安装，意味着本次的服务器事件已经到达了第一个里程碑，终于不用再两个电脑来回切换键盘和鼠标了，欣喜若狂&#13;
总结：&#13;
1. 要把linux系统作为主机，windows作为客机&#13;
2. 学会看日志找到自己当前的问题&#13;
3. 在设置里禁用ssl，或者自己弄一个ca证书&#13;
4. 端口可能被占用，24800改为24801试试&#13;
&#13;
### 下载搜狗输入法&#13;
1. 安装框架` sudo apt-get install fcitx`&#13;
2. 解压`sudo dpkg -i sogoupinyin_版本号_amd64.deb`&#13;
3. 下载依赖项` sudo apt -f install`&#13;
4. 系统里调整fcitx为默认框架&#13;
5. 卸载 `ibus sudo apt purge ibus`&#13;
6. 重启&#13;
&#13;
### 更改清华源地址&#13;
`etc/apt/sources.list.d/ubuntu.sources`&#13;
&#13;
### 下载软件无法直接安装&#13;
1. 用sudo指令在终端安装&#13;
2. 把自己的用户该为管理者权限`sudo usermod -aG sudo username`&#13;
&#13;
---&#13;
&#13;
&gt; 自此，轻重已过一重山，继续启航吧&#13;
&#13;
---&#13;
&#13;
# ubuntu的陨落&#13;
&gt; 背景：使用macrium reflect把旧电脑上的所有文件转移到新电脑上，进行双系统的搭建，应该是默认是在整个磁盘上进行覆盖，我只能说这个软件真的是一比一的全部克隆过来，但双系统的同学真的切记切记要备份，现在我搭建的ubuntu大厦倒塌了，在里面的编程全军覆没（难过呜呜呜）&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/Ubuntu-fu-wu-qi-na-xie-shi.html</guid><pubDate>Sun, 01 Sep 2024 04:24:23 +0000</pubDate></item><item><title>摘句</title><link>https://hnugryu.github.io//post/zhai-ju.html</link><description>### 我所见的，所想的，都会成为我灵魂的一部分永远陪着我&#13;
&#13;
---&#13;
&#13;
1. 如果必须坠落，那就让我坠落，我会成为的那个人一定会接住我&#13;
2. 头悬剑，玉足翩，罪人舞步旋&#13;
3. 我们在规则，承诺，誓言下，筑起一座座高墙，不断陷入身份的陷阱，还美其名曰，这就是我&#13;
4. 我知道我要到达我的乌托邦，在此之前，又有何不可呢&#13;
5. 嘿，朋友，你看，换种方式也没有那么糟糕，不是吗&#13;
6. 你自认为卑劣的性情，我认为是人之常情&#13;
7. 我也想是桥边少年，白衣翩翩&#13;
8. 山之高，月出小，月至小，何皎皎&#13;
9. 少年游，踏浪回首，万千雪藏一春柔&#13;
10. 玉堂白马，正少年归来，风流如画&#13;
11. 鹏北海，凤朝阳，又携书剑路茫茫&#13;
12. 心有亭树，亭亭一如你风致。</description><guid isPermaLink="true">https://hnugryu.github.io//post/zhai-ju.html</guid><pubDate>Thu, 29 Aug 2024 07:54:08 +0000</pubDate></item><item><title>蛤蟆先生去看心理医生</title><link>https://hnugryu.github.io//post/ha-ma-xian-sheng-qu-kan-xin-li-yi-sheng.html</link><description># 书中的基本概念&#13;
## 儿童的基本类型&#13;
- 自然型儿童&#13;
- 适应性儿童&#13;
### 自然型儿童的基本感情&#13;
- 快乐和深情&#13;
- 愤怒&#13;
- 悲伤&#13;
- 恐惧&#13;
## 儿童如何释放愤怒&#13;
叛逆 撒泼 怄气 任性 郁闷 拖延 厌烦 退缩&#13;
## 人生状态&#13;
- 儿童自我状态 （对于世界的反馈表现为儿童时的表现）&#13;
- 成人状态 （过去对于现在产生不了影响，成长的关键）&#13;
- 父母自我状态（效仿父母的模样与价值观）&#13;
## 人生就是一辈子的游戏&#13;
- Poor Little Old Me （可怜可怜弱小的我呀）&#13;
- 我抓到你了，你个坏蛋 （把别人当做调皮的孩子进行惩罚）&#13;
&#13;
---&#13;
&#13;
# 摘录&#13;
- 成长的本质就是要打破依赖关系&#13;
- 没有一种批判比自我批判更强烈，也没有一个法官比自己更严苛&#13;
- 你到底要为自己的不快乐而责怪别人多久&#13;
- 你被称在天平里，显出你的亏欠&#13;
&#13;
---&#13;
&#13;
# 二创&#13;
- 愤怒和内疚感是连在一起的，我们对他人的愤怒天然会下意识产生内疚的情绪，而当类似的负面情绪产生后，是没有办法凭空消失的，要么爆发出来，要么慢慢释放，表现为长时间的低迷状态&#13;
- 成长就是跳脱出自己过去世界在自己身上的投影，我们要看到的是这个世界的全貌，而并非咖啡杯里的漩涡&#13;
&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/ha-ma-xian-sheng-qu-kan-xin-li-yi-sheng.html</guid><pubDate>Thu, 29 Aug 2024 01:42:27 +0000</pubDate></item><item><title>心得</title><link>https://hnugryu.github.io//post/xin-de.html</link><description>1. 很有幸通过互联网能够看到这么多人走过的路，而我也刚刚启程&#13;
 &#13;
&#13;
&gt; 不算早也不算晚，刚刚好，只能轻声问一句：你也在这里啊&#13;
&#13;
2. 当你完成一件事情，如果能够用简便的方法迅速完成，那就不要去想它背后的原理，哪怕之后可能要用到，但是如果出现在你面前的是成系统的，需要一环一环解决的问题，那就不管花多久，都要先把他整体弄懂，了解其中的每个环节，再去找到整体解决的快速方法&#13;
&#13;
3. 虽然已经很在控制自己的情绪了，但不得不承认自己当前的基调是悲伤的，是压抑的，让我自己来形容就是，一个瘸子，好不容易治好了自己的腿，担忧却从担心别人的歧视，变成了恨自己怎么跑的那么慢。</description><guid isPermaLink="true">https://hnugryu.github.io//post/xin-de.html</guid><pubDate>Mon, 26 Aug 2024 12:26:37 +0000</pubDate></item><item><title>更新日志</title><link>https://hnugryu.github.io//post/geng-xin-ri-zhi.html</link><description>**240826（v1.0）**&#13;
搭建了自己的blog，添加了目录栏及一些小插件，解决了一些小的问题。</description><guid isPermaLink="true">https://hnugryu.github.io//post/geng-xin-ri-zhi.html</guid><pubDate>Mon, 26 Aug 2024 11:20:02 +0000</pubDate></item><item><title>创建自己的blog</title><link>https://hnugryu.github.io//post/chuang-jian-zi-ji-de-blog.html</link><description># 基本方法&#13;
1. CSDN，少数派等网站上发表&#13;
- 适用：小白&#13;
- 优点：速度快，且有优质的GUI界面&#13;
2.  利用github page为线上服务器，根据别人的框架搭建自己的blog&#13;
- 适用：有一定了解的初学者&#13;
- 优点：便捷，可以进行个性化设计，更加聚焦于自己知识库的搭建&#13;
3. 利用hexo搭建&#13;
-没有选择的原因：比较复杂，需要下载node.js，利用npm命令下载hexo，还有很多配置的指令，对于初学者每一步都比较麻烦，而且得不到成长，建立一个blog我觉得最重要的就是尽快弄出来，搭建一个简易的框架，之后再进行丰满&#13;
&#13;
---&#13;
&#13;
# [基于Gmeek搭建](https://blog.meekdai.com/)&#13;
## 跟着教程走遇见的一些问题&#13;
1. 更新action失败：&#13;
- 配置文件中缺少 `,`&#13;
2. 怎么样更换自己喜欢的头像&#13;
- [图片库](https://ie.pinterest.com/)&#13;
- 下载到自己的github仓库下面，点击raw图，复制其地址到配置文件中&#13;
。</description><guid isPermaLink="true">https://hnugryu.github.io//post/chuang-jian-zi-ji-de-blog.html</guid><pubDate>Mon, 26 Aug 2024 06:30:53 +0000</pubDate></item></channel></rss>